<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx" xmlns:cache="http://www.springframework.org/schema/cache"
       xmlns:aop="http://www.springframework.org/schema/aop" xmlns:task="http://www.springframework.org/schema/task"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                           http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
                           http://www.springframework.org/schema/context
                           http://www.springframework.org/schema/context/spring-context-3.0.xsd
                           http://www.springframework.org/schema/tx
                           http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
                           http://www.springframework.org/schema/cache
                           http://www.springframework.org/schema/cache/spring-cache.xsd
                           http://www.springframework.org/schema/aop
                           http://www.springframework.org/schema/aop/spring-aop.xsd
                           http://www.springframework.org/schema/task
                           http://www.springframework.org/schema/task/spring-task.xsd">

    <!-- 配置数据源的文件的位置 -->
    <!--<context:property-placeholder location="classpath:db.properties"/>-->
    
    <!--启用注解驱动的定时任务-->
    <task:annotation-driven scheduler="scheduler"/>
    <!--配置定时任务的线程池-->
    <task:scheduler id="scheduler" pool-size="5"/>

    <!-- 开启基于注解的spring缓存管理 -->
    <cache:annotation-driven/>

    <bean id="cacheManagerFactoryBean" class="org.springframework.cache.jcache.JCacheManagerFactoryBean">
        <property name="cacheManagerUri" value="classpath:ehcache.xml"/>
    </bean>

    <bean id="cacheManager" class="system.attendance.electronic.common.JCacheEhcacheManager">
        <property name="cacheManager" ref="cacheManagerFactoryBean"/>
    </bean>

    <!--可以配置多个配置文件-->
    <bean id="propertyConfigurer"
          class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>classpath:db.properties</value>
            </list>
        </property>
        <property name="fileEncoding" value="utf-8"/>
    </bean>

    <!-- 配置数据源 -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close">
        <property name="driverClassName" value="${jdbc.driverClassName}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="${datasource.initialSize}"/>
        <property name="minIdle" value="${datasource.minIdle}"/>
        <property name="maxActive" value="${datasource.maxActive}"/>
        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="${datasource.maxWait}"/>
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="${datasource.timeBetweenEvictionRunsMillis}"/>
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="${datasource.minEvictableIdleTimeMillis}"/>
        <property name="testWhileIdle" value="${datasource.testWhileIdle}"/>
        <!-- 这里建议配置为TRUE，防止取到的连接不可用 -->
        <property name="testOnBorrow" value="${datasource.testOnBorrow}"/>
        <property name="testOnReturn" value="${datasource.testOnReturn}"/>
        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
        <property name="poolPreparedStatements" value="${datasource.poolPreparedStatements}"/>
        <property name="maxPoolPreparedStatementPerConnectionSize"
                  value="${datasource.maxPoolPreparedStatementPerConnectionSize}"/>
        <!-- 这里配置提交方式，默认就是TRUE，可以不用配置 -->
        <!--<property name="defaultAutoCommit" value="true"/>-->
        <!-- 验证连接有效与否的SQL，不同的数据配置不同 -->
        <property name="validationQuery" value="${datasource.validationQuery}"/>
    </bean>

    <!-- 配置sqlSessionFactory: 将spring和mybatis整合-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="mapperLocations" value="classpath:/mapper/*Mapper.xml"/>
        <!--它一般对应我们的实体类所在的包，这个时候会自动取对应包中不包括包名的简单类名作为包括包名的别名-->
        <property name="typeAliasesPackage" value="system.attendance.electronic.model"/>
    </bean>

    <!-- 自动扫描mapper接口,注入sqlsessionfactory ,重点！！！！！-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="system.attendance.electronic.mapper"/>
    </bean>

    <!--SqlSessionTemplate是MyBatis-Spring的核心。这个类负责管理MyBatis的SqlSession,调用MyBatis的SQL方法-->
    <bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg index="0" ref="sqlSessionFactory"/>
    </bean>

    <!-- 配置事务管理器 -->
    <bean id="transactionManage" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!--支持注解-->
    <tx:annotation-driven proxy-target-class="true"
                          transaction-manager="transactionManage"/>

    <aop:aspectj-autoproxy proxy-target-class="true"/>

    <tx:advice id="txAdvice" transaction-manager="transactionManage">
        <tx:attributes>
            <tx:method name="save*" propagation="REQUIRED"/>
            <tx:method name="add*" propagation="REQUIRED"/>
            <tx:method name="create*" propagation="REQUIRED"/>
            <tx:method name="insert*" propagation="REQUIRED"/>
            <tx:method name="update*" propagation="REQUIRED"/>
            <tx:method name="merge*" propagation="REQUIRED"/>
            <tx:method name="del*" propagation="REQUIRED"/>
            <tx:method name="refund*" propagation="REQUIRED"/>
            <tx:method name="recharge*" propagation="REQUIRED"/>
            <tx:method name="remove*" propagation="REQUIRED"/>
            <tx:method name="put*" propagation="REQUIRED"/>
            <tx:method name="gen*" propagation="REQUIRED"/>
            <tx:method name="use*" propagation="REQUIRED"/>
            <tx:method name="pay*" propagation="REQUIRED"/>
            <tx:method name="bind*" propagation="REQUIRED"/>
            <tx:method name="unBind*" propagation="REQUIRED"/>
            <tx:method name="parse*" propagation="REQUIRED"/>
            <tx:method name="fault*" propagation="REQUIRED"/>
            <tx:method name="get*" propagation="REQUIRED" read-only="true"/>
            <tx:method name="count*" propagation="REQUIRED" read-only="true"/>
            <tx:method name="find*" propagation="REQUIRED" read-only="true"/>
            <tx:method name="list*" propagation="REQUIRED" read-only="true"/>
            <tx:method name="*" read-only="true"/>
        </tx:attributes>
    </tx:advice>

    <aop:config>
        <!-- 只对业务逻辑层实施事务 -->
        <aop:pointcut id="txPointcut" expression="execution(* *..service..*(..))"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="txPointcut"/>
    </aop:config>

    <!-- 扫描service -->
    <context:component-scan base-package="system.attendance.electronic.service"/>
    <context:component-scan base-package="system.attendance.electronic.common"/>
    <task:scheduler id="IScheduler"/>
</beans>